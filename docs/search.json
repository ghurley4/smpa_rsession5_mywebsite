[
  {
    "objectID": "02_virginia_election_project_youranalysis.html",
    "href": "02_virginia_election_project_youranalysis.html",
    "title": "Virginia Election Project",
    "section": "",
    "text": "Comparing Virgnia Gov vs. Prez\n\nhead(joined_vacomparison)\n\n# A tibble: 6 × 9\n  locality       biden trump biden_pct trump_pct youngkin mcauliffe pct_youngkin\n  <chr>          <dbl> <dbl>     <dbl>     <dbl>    <int>     <int>        <dbl>\n1 ACCOMACK COUN…  7578  9172      44.7      54.1     7878      4948         61.1\n2 ALBEMARLE COU… 42466 20804      65.7      32.2    19141     31919         37.2\n3 ALEXANDRIA CI… 66240 14544      80.3      17.6    14013     43866         24.0\n4 ALLEGHANY COU…  2243  5859      27.3      71.4     4530      1518         74.5\n5 AMELIA COUNTY   2411  5390      30.6      68.3     4720      1617         74.2\n6 AMHERST COUNTY  5672 11041      33.4      64.9     9731      3897         71  \n# ℹ 1 more variable: pct_mcauliffe <dbl>"
  },
  {
    "objectID": "walkthrough.html",
    "href": "walkthrough.html",
    "title": "Analysis Walkthrough Example",
    "section": "",
    "text": "We’ll start by loading. our libraries.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.1     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\n\nCode\nlibrary(lubridate)\n\n\nWe’re going to look at some sample data from Texas on housing prices throughout the state.\nFirst we’ll load data.\n\n\nCode\n# run this line below load the data for this assignment\n# we'll use a built-in dataset from the ggplot2 package (loaded as party of the tidyverse)\nhousesales <- ggplot2::txhousing\n\n\nNow, let’s see what the data looks like\n\n\nCode\nhousesales %>% \n  head()\n\n\n# A tibble: 6 × 9\n  city     year month sales   volume median listings inventory  date\n  <chr>   <int> <int> <dbl>    <dbl>  <dbl>    <dbl>     <dbl> <dbl>\n1 Abilene  2000     1    72  5380000  71400      701       6.3 2000 \n2 Abilene  2000     2    98  6505000  58700      746       6.6 2000.\n3 Abilene  2000     3   130  9285000  58100      784       6.8 2000.\n4 Abilene  2000     4    98  9730000  68600      785       6.9 2000.\n5 Abilene  2000     5   141 10590000  67300      794       6.8 2000.\n6 Abilene  2000     6   156 13910000  66900      780       6.6 2000."
  },
  {
    "objectID": "Academic Paper.html",
    "href": "Academic Paper.html",
    "title": "Paper",
    "section": "",
    "text": "Humanity’s Need for Efficient Coexistence with the Internet\nHumanity has been entranced with the internet since its creation and as the internet evolves humanity\\'s dependency on it grows. The internet has provided anyone with access to it an encyclopedia of the past and present of the world as well as multiple platforms where people can interact with each other. People can connect from anywhere on the planet as long as they have a device capable of connecting to Wifi. Thanks to global connectivity, the internet is now both the facilitator and the producer of human culture. The internet has allowed for the creation of online platforms where the exchange of ideas, memes, and culture can be easily accessed by anyone in the world. Online forums and social media platforms facilitate personalized culture in such a rapid manner to the point where humans are constantly itching for the next dose of dopamine and find themselves rapidly scrolling on their devices. As Johann Hari has shown in his article Your attention didn\\'t collapse, the internet has stolen our attention, and the problem will only continue to worsen unless we find a way to combat it. Attention-seeking platforms are scattered throughout the internet that facilitates the exchange of ideas in both positive and toxic manners. Whitney Phillips\\' journal It Wasn\\'t Just the Trolls: Early Internet Culture, \\\"Fun,\\\" and the Fires of Exclusionary Laughter explains how early online forums and troll culture have created an internet of immense toxicity, racism, and negativity. An aspect of the internet that is incredibly dangerous is its speed of evolution. Artificial intelligence, social media, algorithms, and personalized content barely scratch the surface of the internet\\'s capabilities in terms of keeping our attention. Even eye-tracking data is being studied and analyzed as a way to determine the most appealing placement of content on the screen as shown by Alexander Monea in Captured Time: Eye Tracking and the Attention Economy. \n\nIt is a fact that the internet is evolving too fast to the point where humanity cannot live without it. The new generations of kids don\\'t pick up the glove and ball, they watch YouTube Kids and play games on their iPads. The global distribution of technologies has in turn caused the fragmentation of media. Johann Hari\\'s godson in his article, Your attention didn\\'t collapse. It was stolen, is an example of how technologies that incorporate the internet are meticulously designed to grasp one\\'s attention and anxieties. James J. Hodge\\'s essay on anxiety Screwed: Anxiety and the Digital Ends of Anticipation explains how technologies adapt and take advantage of the anxieties of humans in simultaneously positive and negative manners. Internet algorithms and machine learning will evolve alongside children with internet access to cater content to their preferences. The question that researchers grapple with is how does humanity fight against these technological dependencies. The bottom line is that humanity has already become dependent on devices capable of accessing the internet. Due to the boundless amount of resources that the internet provides in information, communication, and pleasure, humanity will not reject its dependency. Rather than finding ways to shed our dependency on the internet, consumers need to look for ways to efficiently coexist with it.\n\nAlexander Monea\\'s work on eye-tracking exemplifies the dangers that technological evolution can have on our attention span. Base software, search engines, and social media platforms have designed algorithms to study and adapt to one\\'s media habits. Monea believes that \\\"human systems might be just as amenable to command, control, and communication as computational systems.\\\" The majority of laptops made today feature a camera as part of their specs. As Monea showed, Nvidia and companies pursuing VR(Virtual Reality) are beginning to use eye tracking as a feature of their systems to improve their products. In practice, it is conceptual and mainly unimproved as machine learning and algorithms study humans through their habits. The large fear of this technology is the inevitable selling of this data to platforms that employ machine learning. In addition to the ever-expanding knowledge that these platforms possess on their users from algorithms and machine learning, data from eye-tracking technologies will be used to further assess the habits of internet users. What kind of colors are people more drawn to, what fonts are more pleasurable to the eyes, and what designs will keep a user\\'s attention for longer. The average human attention span is growing smaller and smaller thanks to the internet. According to Johann Hari, studies found that the average college student can only focus on one task for approximately 65 seconds and office workers cannot focus for longer than three minutes. Eye-tracking technology is a further manner to assess the attention span of humans visually. These statistics will continue to decrease with eye-tracking technology when it becomes practical as a way to further study technology and internet habits. Platforms will be able to personalize content locations to keep their consumers engaged with their products."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Graham Hurley",
    "section": "",
    "text": "Hi, I’m Graham and I am a senior at GWU."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Graham Hurley",
    "section": "Education",
    "text": "Education\nThe George Washington University B.A. in Journalism/Mass Communications and Spanish"
  },
  {
    "objectID": "index.html#skills",
    "href": "index.html#skills",
    "title": "Graham Hurley",
    "section": "Skills",
    "text": "Skills\nReporting and Writing Production Adobe Suite"
  },
  {
    "objectID": "01_virginia_election_project_datawrangling.html",
    "href": "01_virginia_election_project_datawrangling.html",
    "title": "Virginia Election Project",
    "section": "",
    "text": "Data available here: https://historical.elections.virginia.gov/elections/view/144567/\nA little column cleaning and we’ll load in the data file.\n\nprez_2020 <- read_csv(\"processed_data/va_2020_prez_cleaned.csv\")\n\nRows: 134 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): locality\nnum (3): biden, trump, total_votes_2021_prez\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nLet’s see what we have\n\nhead(prez_2020) \n\n# A tibble: 6 × 4\n  locality         biden trump total_votes_2021_prez\n  <chr>            <dbl> <dbl>                 <dbl>\n1 Accomack County   7578  9172                 16962\n2 Albemarle County 42466 20804                 64657\n3 Alexandria City  66240 14544                 82508\n4 Alleghany County  2243  5859                  8203\n5 Amelia County     2411  5390                  7893\n6 Amherst County    5672 11041                 17005\n\n\nCalculating percentage of the vote\n\nprez_2020 %>% \n  mutate(\n    biden_pct = biden/total_votes_2021_prez\n  )\n\n# A tibble: 134 × 5\n   locality           biden trump total_votes_2021_prez biden_pct\n   <chr>              <dbl> <dbl>                 <dbl>     <dbl>\n 1 Accomack County     7578  9172                 16962     0.447\n 2 Albemarle County   42466 20804                 64657     0.657\n 3 Alexandria City    66240 14544                 82508     0.803\n 4 Alleghany County    2243  5859                  8203     0.273\n 5 Amelia County       2411  5390                  7893     0.305\n 6 Amherst County      5672 11041                 17005     0.334\n 7 Appomattox County   2418  6702                  9268     0.261\n 8 Arlington County  105344 22318                130699     0.806\n 9 Augusta County     10840 30714                 42278     0.256\n10 Bath County          646  1834                  2501     0.258\n# ℹ 124 more rows\n\n\nNow let’s do some rounding and move that decimal point\n\nprez_2020 %>% \n  mutate(\n    biden_pct = janitor::round_half_up(biden / total_votes_2021_prez * 100, 1)\n  )\n\n# A tibble: 134 × 5\n   locality           biden trump total_votes_2021_prez biden_pct\n   <chr>              <dbl> <dbl>                 <dbl>     <dbl>\n 1 Accomack County     7578  9172                 16962      44.7\n 2 Albemarle County   42466 20804                 64657      65.7\n 3 Alexandria City    66240 14544                 82508      80.3\n 4 Alleghany County    2243  5859                  8203      27.3\n 5 Amelia County       2411  5390                  7893      30.5\n 6 Amherst County      5672 11041                 17005      33.4\n 7 Appomattox County   2418  6702                  9268      26.1\n 8 Arlington County  105344 22318                130699      80.6\n 9 Augusta County     10840 30714                 42278      25.6\n10 Bath County          646  1834                  2501      25.8\n# ℹ 124 more rows\n\n\nNow trump too\n\nprez_2020 <- prez_2020 %>% \n  mutate(\n    biden_pct = janitor::round_half_up(biden / total_votes_2021_prez * 100, 2),\n    trump_pct = janitor::round_half_up(trump / total_votes_2021_prez * 100, 2)\n  )\n\nhead(prez_2020)\n\n# A tibble: 6 × 6\n  locality         biden trump total_votes_2021_prez biden_pct trump_pct\n  <chr>            <dbl> <dbl>                 <dbl>     <dbl>     <dbl>\n1 Accomack County   7578  9172                 16962      44.7      54.1\n2 Albemarle County 42466 20804                 64657      65.7      32.2\n3 Alexandria City  66240 14544                 82508      80.3      17.6\n4 Alleghany County  2243  5859                  8203      27.3      71.4\n5 Amelia County     2411  5390                  7893      30.6      68.3\n6 Amherst County    5672 11041                 17005      33.4      64.9"
  },
  {
    "objectID": "01_virginia_election_project_datawrangling.html#reshaping",
    "href": "01_virginia_election_project_datawrangling.html#reshaping",
    "title": "Virginia Election Project",
    "section": "Reshaping",
    "text": "Reshaping\nEnter pivot_wider().\nWe’ll get rid of everything we don’t need first.\n\ngov_2021 <- gov_2021 %>% \n  filter(ballot_name %in% c(\"Glenn A. Youngkin\", \"Terry R. McAuliffe\")) %>% \n  select(-locality_code,\n         -political_party)\n  \ngov_2021\n\n# A tibble: 266 × 4\n   locality_name    ballot_name        votes percentage\n   <chr>            <chr>              <int> <chr>     \n 1 ACCOMACK COUNTY  Glenn A. Youngkin   7878 61.08%    \n 2 ACCOMACK COUNTY  Terry R. McAuliffe  4948 38.37%    \n 3 ALBEMARLE COUNTY Glenn A. Youngkin  19141 37.21%    \n 4 ALBEMARLE COUNTY Terry R. McAuliffe 31919 62.05%    \n 5 ALEXANDRIA CITY  Glenn A. Youngkin  14013 24.02%    \n 6 ALEXANDRIA CITY  Terry R. McAuliffe 43866 75.20%    \n 7 ALLEGHANY COUNTY Glenn A. Youngkin   4530 74.52%    \n 8 ALLEGHANY COUNTY Terry R. McAuliffe  1518 24.97%    \n 9 AMELIA COUNTY    Glenn A. Youngkin   4720 74.19%    \n10 AMELIA COUNTY    Terry R. McAuliffe  1617 25.42%    \n# ℹ 256 more rows\n\n\nNow we’ll do the spreading out to reshape.\n\ngov_2021_wide <- gov_2021 %>% \n  pivot_wider(names_from = ballot_name, values_from = c(votes, percentage))\n\ngov_2021_wide\n\n# A tibble: 133 × 5\n   locality_name     `votes_Glenn A. Youngkin` `votes_Terry R. McAuliffe`\n   <chr>                                 <int>                      <int>\n 1 ACCOMACK COUNTY                        7878                       4948\n 2 ALBEMARLE COUNTY                      19141                      31919\n 3 ALEXANDRIA CITY                       14013                      43866\n 4 ALLEGHANY COUNTY                       4530                       1518\n 5 AMELIA COUNTY                          4720                       1617\n 6 AMHERST COUNTY                         9731                       3897\n 7 APPOMATTOX COUNTY                      5971                       1438\n 8 ARLINGTON COUNTY                      21548                      73013\n 9 AUGUSTA COUNTY                        26196                       7231\n10 BATH COUNTY                            1539                        396\n# ℹ 123 more rows\n# ℹ 2 more variables: `percentage_Glenn A. Youngkin` <chr>,\n#   `percentage_Terry R. McAuliffe` <chr>\n\n\nNice.\nThis is giving us some pretty long column names. we can change them after the fact using rename(). But first let’s clean the names to make it easier.\n\ngov_2021_wide <- gov_2021_wide %>% \n  clean_names()\n\nhead(gov_2021_wide)\n\n# A tibble: 6 × 5\n  locality_name    votes_glenn_a_youngkin votes_terry_r_mc_auliffe\n  <chr>                             <int>                    <int>\n1 ACCOMACK COUNTY                    7878                     4948\n2 ALBEMARLE COUNTY                  19141                    31919\n3 ALEXANDRIA CITY                   14013                    43866\n4 ALLEGHANY COUNTY                   4530                     1518\n5 AMELIA COUNTY                      4720                     1617\n6 AMHERST COUNTY                     9731                     3897\n# ℹ 2 more variables: percentage_glenn_a_youngkin <chr>,\n#   percentage_terry_r_mc_auliffe <chr>\n\n\nNow let’s rename, and we’ll use similar names to what we had earlier in our 2021 results.\n\ngov_2021_wide <- gov_2021_wide %>% \n  rename(\n    youngkin = votes_glenn_a_youngkin,\n    mcauliffe = votes_terry_r_mc_auliffe,\n    pct_youngkin = percentage_glenn_a_youngkin,\n    pct_mcauliffe = percentage_terry_r_mc_auliffe\n  )\n\nhead(gov_2021_wide)\n\n# A tibble: 6 × 5\n  locality_name    youngkin mcauliffe pct_youngkin pct_mcauliffe\n  <chr>               <int>     <int> <chr>        <chr>        \n1 ACCOMACK COUNTY      7878      4948 61.08%       38.37%       \n2 ALBEMARLE COUNTY    19141     31919 37.21%       62.05%       \n3 ALEXANDRIA CITY     14013     43866 24.02%       75.20%       \n4 ALLEGHANY COUNTY     4530      1518 74.52%       24.97%       \n5 AMELIA COUNTY        4720      1617 74.19%       25.42%       \n6 AMHERST COUNTY       9731      3897 71.00%       28.43%       \n\n\nBingo.\nThere’s still one potential issue here. Can you see it?\nThe percentage columns are actually text values, not numbers. And they have that % sign in the text too. Let’s fix that using a handy function from the readr package, parse_number().\n\ngov_2021_wide <- gov_2021_wide %>% \n  mutate(\n    pct_youngkin = readr::parse_number(pct_youngkin),\n    pct_mcauliffe = readr::parse_number(pct_mcauliffe)\n  )\n\nhead(gov_2021_wide)\n\n# A tibble: 6 × 5\n  locality_name    youngkin mcauliffe pct_youngkin pct_mcauliffe\n  <chr>               <int>     <int>        <dbl>         <dbl>\n1 ACCOMACK COUNTY      7878      4948         61.1          38.4\n2 ALBEMARLE COUNTY    19141     31919         37.2          62.0\n3 ALEXANDRIA CITY     14013     43866         24.0          75.2\n4 ALLEGHANY COUNTY     4530      1518         74.5          25.0\n5 AMELIA COUNTY        4720      1617         74.2          25.4\n6 AMHERST COUNTY       9731      3897         71            28.4\n\n\nPerfect. Problem solved."
  },
  {
    "objectID": "01_virginia_election_project_datawrangling.html#comparing-gov-vs.-prez-results",
    "href": "01_virginia_election_project_datawrangling.html#comparing-gov-vs.-prez-results",
    "title": "Virginia Election Project",
    "section": "Comparing gov vs. prez results",
    "text": "Comparing gov vs. prez results\nNow that things are join, let’s actually go ahead and start making columns to compare the two elections and how the candidates did this time compared with last time.\nWhere should we go from here….? Give it a shot…\n\njoined_vacomparison  %>% \n  mutate(total_votes = biden + trump)  %>% \nmutate(winner = ifelse(biden_pct > trump_pct, \"Biden\", \"Trump\"))\n\n# A tibble: 133 × 11\n   locality      biden trump biden_pct trump_pct youngkin mcauliffe pct_youngkin\n   <chr>         <dbl> <dbl>     <dbl>     <dbl>    <int>     <int>        <dbl>\n 1 ACCOMACK CO…   7578  9172      44.7      54.1     7878      4948         61.1\n 2 ALBEMARLE C…  42466 20804      65.7      32.2    19141     31919         37.2\n 3 ALEXANDRIA …  66240 14544      80.3      17.6    14013     43866         24.0\n 4 ALLEGHANY C…   2243  5859      27.3      71.4     4530      1518         74.5\n 5 AMELIA COUN…   2411  5390      30.6      68.3     4720      1617         74.2\n 6 AMHERST COU…   5672 11041      33.4      64.9     9731      3897         71  \n 7 APPOMATTOX …   2418  6702      26.1      72.3     5971      1438         80.3\n 8 ARLINGTON C… 105344 22318      80.6      17.1    21548     73013         22.6\n 9 AUGUSTA COU…  10840 30714      25.6      72.6    26196      7231         77.9\n10 BATH COUNTY     646  1834      25.8      73.3     1539       396         79.0\n# ℹ 123 more rows\n# ℹ 3 more variables: pct_mcauliffe <dbl>, total_votes <dbl>, winner <chr>"
  },
  {
    "objectID": "portfolio.html",
    "href": "portfolio.html",
    "title": "Portfolio",
    "section": "",
    "text": "Hi there this is my portfolio page!"
  },
  {
    "objectID": "portfolio.html#voting-rights-story",
    "href": "portfolio.html#voting-rights-story",
    "title": "Portfolio",
    "section": "Voting Rights Story",
    "text": "Voting Rights Story\nThis story from the Associated Press dealt with voting rights issues in Texas in the wake of laws designed to make voting access more difficult."
  },
  {
    "objectID": "portfolio.html#election-night-coverage",
    "href": "portfolio.html#election-night-coverage",
    "title": "Portfolio",
    "section": "Election Night Coverage",
    "text": "Election Night Coverage\nHere is a story that captured the moment of victory for candidate TKTK in the 2022 general election."
  },
  {
    "objectID": "Mapping.html",
    "href": "Mapping.html",
    "title": "Mapping",
    "section": "",
    "text": "Here is an interactive map for the state of GA\n\nknitr::opts_chunk$set(echo = TRUE)\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.1     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(tigris)\n\nTo enable caching of data, set `options(tigris_use_cache = TRUE)`\nin your R script or .Rprofile.\n\nlibrary(sf)\n\nLinking to GEOS 3.8.0, GDAL 3.0.4, PROJ 6.3.1; sf_use_s2() is TRUE\n\nlibrary(tmap)\nlibrary(tmaptools)\nlibrary(htmltools)\nlibrary(janitor)\n\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\nlibrary(rmapshaper)\nlibrary(here)\n\nhere() starts at /cloud/project\n\noptions(tigris_class = \"sf\")\nknitr::opts_chunk$set(echo = TRUE)\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(tigris)\nlibrary(sf)\nlibrary(tidycensus)\nlibrary(htmltools)\nlibrary(janitor)\nlibrary(here)\nlibrary(mapview)\nlibrary(leafsync)\nlibrary(leaflet.extras2)\n\nLoading required package: leaflet\n\nlibrary(viridis)\n\nLoading required package: viridisLite\n\noptions(tigris_class = \"sf\")\n\n\n# uncomment to run, then recomment it out so you don't run it every time\n\n#  census_api_key(\"2a6f8c21a30d3024e038d67d7d4eba647dc79cd4\", overwrite =TRUE)\n\n\n\n\n\n install.packages('leaflet.extras2')\n\nInstalling package into '/cloud/lib/x86_64-pc-linux-gnu-library/4.2'\n(as 'lib' is unspecified)\n\n\n\nmyvars <- c(totalpop = \"B01003_001\",\n            medincome = \"B19013_001\",\n            medage = \"B01002_001\"\n)\n\n\n#pull for GA counties\nga_counties_withgeo <- get_acs(geography = \"county\",\n                       variables = c(myvars),\n                       state = \"GA\",\n                       output = \"wide\",\n                       geometry = TRUE)\n\nGetting data from the 2017-2021 5-year ACS\n\n\nDownloading feature geometry from the Census website.  To cache shapefiles for use in future sessions, set `options(tigris_use_cache = TRUE)`.\n\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |                                                                      |   1%\n  |                                                                            \n  |=                                                                     |   1%\n  |                                                                            \n  |=                                                                     |   2%\n  |                                                                            \n  |==                                                                    |   2%\n  |                                                                            \n  |==                                                                    |   3%\n  |                                                                            \n  |==                                                                    |   4%\n  |                                                                            \n  |===                                                                   |   4%\n  |                                                                            \n  |===                                                                   |   5%\n  |                                                                            \n  |====                                                                  |   5%\n  |                                                                            \n  |====                                                                  |   6%\n  |                                                                            \n  |=====                                                                 |   7%\n  |                                                                            \n  |=====                                                                 |   8%\n  |                                                                            \n  |======                                                                |   8%\n  |                                                                            \n  |======                                                                |   9%\n  |                                                                            \n  |=======                                                               |   9%\n  |                                                                            \n  |=======                                                               |  10%\n  |                                                                            \n  |=========                                                             |  13%\n  |                                                                            \n  |==========                                                            |  15%\n  |                                                                            \n  |===========                                                           |  16%\n  |                                                                            \n  |=============                                                         |  19%\n  |                                                                            \n  |==============                                                        |  19%\n  |                                                                            \n  |==============                                                        |  20%\n  |                                                                            \n  |===============                                                       |  21%\n  |                                                                            \n  |===============                                                       |  22%\n  |                                                                            \n  |================                                                      |  22%\n  |                                                                            \n  |=================                                                     |  24%\n  |                                                                            \n  |===================                                                   |  27%\n  |                                                                            \n  |====================                                                  |  29%\n  |                                                                            \n  |=====================                                                 |  29%\n  |                                                                            \n  |=====================                                                 |  30%\n  |                                                                            \n  |=====================                                                 |  31%\n  |                                                                            \n  |======================                                                |  31%\n  |                                                                            \n  |========================                                              |  35%\n  |                                                                            \n  |=========================                                             |  35%\n  |                                                                            \n  |===========================                                           |  38%\n  |                                                                            \n  |============================                                          |  40%\n  |                                                                            \n  |============================                                          |  41%\n  |                                                                            \n  |=============================                                         |  41%\n  |                                                                            \n  |===============================                                       |  44%\n  |                                                                            \n  |=================================                                     |  48%\n  |                                                                            \n  |====================================                                  |  51%\n  |                                                                            \n  |====================================                                  |  52%\n  |                                                                            \n  |=====================================                                 |  52%\n  |                                                                            \n  |=====================================                                 |  53%\n  |                                                                            \n  |=====================================                                 |  54%\n  |                                                                            \n  |======================================                                |  54%\n  |                                                                            \n  |======================================                                |  55%\n  |                                                                            \n  |=======================================                               |  55%\n  |                                                                            \n  |=======================================                               |  56%\n  |                                                                            \n  |========================================                              |  56%\n  |                                                                            \n  |========================================                              |  57%\n  |                                                                            \n  |========================================                              |  58%\n  |                                                                            \n  |=========================================                             |  58%\n  |                                                                            \n  |==========================================                            |  59%\n  |                                                                            \n  |==========================================                            |  60%\n  |                                                                            \n  |==========================================                            |  61%\n  |                                                                            \n  |===========================================                           |  62%\n  |                                                                            \n  |============================================                          |  62%\n  |                                                                            \n  |============================================                          |  63%\n  |                                                                            \n  |===============================================                       |  66%\n  |                                                                            \n  |=================================================                     |  70%\n  |                                                                            \n  |==================================================                    |  71%\n  |                                                                            \n  |==================================================                    |  72%\n  |                                                                            \n  |===================================================                   |  72%\n  |                                                                            \n  |===================================================                   |  73%\n  |                                                                            \n  |====================================================                  |  74%\n  |                                                                            \n  |====================================================                  |  75%\n  |                                                                            \n  |=====================================================                 |  75%\n  |                                                                            \n  |=======================================================               |  79%\n  |                                                                            \n  |=========================================================             |  82%\n  |                                                                            \n  |===========================================================           |  84%\n  |                                                                            \n  |===========================================================           |  85%\n  |                                                                            \n  |==============================================================        |  88%\n  |                                                                            \n  |================================================================      |  92%\n  |                                                                            \n  |==================================================================    |  95%\n  |                                                                            \n  |===================================================================== |  98%\n  |                                                                            \n  |======================================================================| 100%\n\nga_counties_withgeo\n\nSimple feature collection with 159 features and 8 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -85.60516 ymin: 30.35785 xmax: -80.84038 ymax: 35.00124\nGeodetic CRS:  NAD83\nFirst 10 features:\n   GEOID                      NAME totalpopE totalpopM medincomeE medincomeM\n1  13021      Bibb County, Georgia    156711        NA      43862       1778\n2  13049  Charlton County, Georgia     12416        NA      45494       5791\n3  13283  Treutlen County, Georgia      6410        NA      35441       9710\n4  13309   Wheeler County, Georgia      7568        NA      26776       3605\n5  13279    Toombs County, Georgia     26956        NA      42975       3095\n6  13077    Coweta County, Georgia    144928        NA      83486       2974\n7  13153   Houston County, Georgia    161177        NA      70313       3057\n8  13183      Long County, Georgia     16398        NA      52742       8858\n9  13163 Jefferson County, Georgia     15708        NA      42238       4150\n10 13261    Sumter County, Georgia     29690        NA      36687       2163\n   medageE medageM                       geometry\n1     36.2     0.3 MULTIPOLYGON (((-83.89192 3...\n2     40.6     1.5 MULTIPOLYGON (((-82.4156 31...\n3     39.9     5.3 MULTIPOLYGON (((-82.74762 3...\n4     33.6    10.0 MULTIPOLYGON (((-82.93976 3...\n5     37.8     0.9 MULTIPOLYGON (((-82.48038 3...\n6     38.9     0.3 MULTIPOLYGON (((-85.0132 33...\n7     35.9     0.3 MULTIPOLYGON (((-83.85685 3...\n8     33.7     0.8 MULTIPOLYGON (((-81.98162 3...\n9     40.5     0.8 MULTIPOLYGON (((-82.66192 3...\n10    37.0     1.1 MULTIPOLYGON (((-84.44381 3...\n\n\n\n#all counties in the US\nall_counties_withgeo <- get_acs(geography = \"county\",\n                       variables = c(myvars),\n                       output = \"wide\",\n                       geometry = TRUE)\n\nGetting data from the 2017-2021 5-year ACS\n\n\nDownloading feature geometry from the Census website.  To cache shapefiles for use in future sessions, set `options(tigris_use_cache = TRUE)`.\n\nall_counties_withgeo\n\nSimple feature collection with 3221 features and 8 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -179.1489 ymin: 17.88328 xmax: 179.7785 ymax: 71.36516\nGeodetic CRS:  NAD83\nFirst 10 features:\n   GEOID                              NAME totalpopE totalpopM medincomeE\n1  20161              Riley County, Kansas     72602        NA      53296\n2  19159             Ringgold County, Iowa      4739        NA      57700\n3  30009            Carbon County, Montana     10488        NA      63178\n4  16007           Bear Lake County, Idaho      6327        NA      60337\n5  55011         Buffalo County, Wisconsin     13314        NA      61167\n6  31185             York County, Nebraska     14164        NA      66337\n7  08037            Eagle County, Colorado     55693        NA      91338\n8  42129 Westmoreland County, Pennsylvania    355107        NA      64708\n9  40079         Le Flore County, Oklahoma     48436        NA      43049\n10 48053              Burnet County, Texas     48424        NA      65363\n   medincomeM medageE medageM                       geometry\n1        2489    25.5     0.1 MULTIPOLYGON (((-96.96095 3...\n2        5058    44.3     1.0 MULTIPOLYGON (((-94.47167 4...\n3        4261    50.7     0.9 MULTIPOLYGON (((-109.7987 4...\n4        7039    38.9     1.1 MULTIPOLYGON (((-111.6345 4...\n5        2352    46.5     0.5 MULTIPOLYGON (((-92.08384 4...\n6        4128    39.5     1.2 MULTIPOLYGON (((-97.82629 4...\n7        4058    37.8     0.8 MULTIPOLYGON (((-107.1137 3...\n8        1350    47.1     0.2 MULTIPOLYGON (((-79.90487 4...\n9        1869    38.8     0.3 MULTIPOLYGON (((-95.05996 3...\n10       4694    44.7     0.3 MULTIPOLYGON (((-98.45924 3...\n\n\n\n#remove MOE columns - they all end with \"M\"\nga_counties_withgeo <- ga_counties_withgeo %>%\n  select(-ends_with(\"M\"))\n\nga_counties_withgeo\n\nSimple feature collection with 159 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -85.60516 ymin: 30.35785 xmax: -80.84038 ymax: 35.00124\nGeodetic CRS:  NAD83\nFirst 10 features:\n   GEOID                      NAME totalpopE medincomeE medageE\n1  13021      Bibb County, Georgia    156711      43862    36.2\n2  13049  Charlton County, Georgia     12416      45494    40.6\n3  13283  Treutlen County, Georgia      6410      35441    39.9\n4  13309   Wheeler County, Georgia      7568      26776    33.6\n5  13279    Toombs County, Georgia     26956      42975    37.8\n6  13077    Coweta County, Georgia    144928      83486    38.9\n7  13153   Houston County, Georgia    161177      70313    35.9\n8  13183      Long County, Georgia     16398      52742    33.7\n9  13163 Jefferson County, Georgia     15708      42238    40.5\n10 13261    Sumter County, Georgia     29690      36687    37.0\n                         geometry\n1  MULTIPOLYGON (((-83.89192 3...\n2  MULTIPOLYGON (((-82.4156 31...\n3  MULTIPOLYGON (((-82.74762 3...\n4  MULTIPOLYGON (((-82.93976 3...\n5  MULTIPOLYGON (((-82.48038 3...\n6  MULTIPOLYGON (((-85.0132 33...\n7  MULTIPOLYGON (((-83.85685 3...\n8  MULTIPOLYGON (((-81.98162 3...\n9  MULTIPOLYGON (((-82.66192 3...\n10 MULTIPOLYGON (((-84.44381 3...\n\n\n\n#remove that trailing \"E\" for the state of GA\n\ncolnames(ga_counties_withgeo) <- sub(\"E$\", \"\", colnames(ga_counties_withgeo)) # $ means end of string only\n\nga_counties_withgeo\n\nSimple feature collection with 159 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -85.60516 ymin: 30.35785 xmax: -80.84038 ymax: 35.00124\nGeodetic CRS:  NAD83\nFirst 10 features:\n   GEOID                       NAM totalpop medincome medage\n1  13021      Bibb County, Georgia   156711     43862   36.2\n2  13049  Charlton County, Georgia    12416     45494   40.6\n3  13283  Treutlen County, Georgia     6410     35441   39.9\n4  13309   Wheeler County, Georgia     7568     26776   33.6\n5  13279    Toombs County, Georgia    26956     42975   37.8\n6  13077    Coweta County, Georgia   144928     83486   38.9\n7  13153   Houston County, Georgia   161177     70313   35.9\n8  13183      Long County, Georgia    16398     52742   33.7\n9  13163 Jefferson County, Georgia    15708     42238   40.5\n10 13261    Sumter County, Georgia    29690     36687   37.0\n                         geometry\n1  MULTIPOLYGON (((-83.89192 3...\n2  MULTIPOLYGON (((-82.4156 31...\n3  MULTIPOLYGON (((-82.74762 3...\n4  MULTIPOLYGON (((-82.93976 3...\n5  MULTIPOLYGON (((-82.48038 3...\n6  MULTIPOLYGON (((-85.0132 33...\n7  MULTIPOLYGON (((-83.85685 3...\n8  MULTIPOLYGON (((-81.98162 3...\n9  MULTIPOLYGON (((-82.66192 3...\n10 MULTIPOLYGON (((-84.44381 3...\n\n\n\n#Here is our initial mapview for the state of GA\nmapview(ga_counties_withgeo, zcol = \"medincome\")\n\n\n\n\n\n\n\n# This set of code allows us to customize maps with colors. \n\nmapview(ga_counties_withgeo, zcol = \"medincome\", \n         col.regions = RColorBrewer::brewer.pal(9, \"Greens\"), \n         alpha.regions = 1)\n\nWarning: Found less unique colors (9) than unique zcol values (159)! \nInterpolating color vector to match number of zcol values.\n\n\n\n\n\n\n\n\nmapviewOptions(\"basemaps.color.shuffle\" = FALSE)\n\n\nmapview(ga_counties_withgeo, zcol = \"medincome\", \n         col.regions = RColorBrewer::brewer.pal(9, \"Greens\"), \n         alpha.regions = 1)\n\nWarning: Found less unique colors (9) than unique zcol values (159)! \nInterpolating color vector to match number of zcol values.\n\n\n\n\n\n\n\n\nmap_income <- mapview(ga_counties_withgeo, zcol = \"medincome\", \n         col.regions = RColorBrewer::brewer.pal(9, \"Greens\"), \n         alpha.regions = 1)\n\nWarning: Found less unique colors (9) than unique zcol values (159)! \nInterpolating color vector to match number of zcol values.\n\nmap_age <- mapview(ga_counties_withgeo, zcol = \"medage\", \n         col.regions = RColorBrewer::brewer.pal(9, \"Greens\"), \n         alpha.regions = 1)\n\nWarning: Found less unique colors (9) than unique zcol values (97)! \nInterpolating color vector to match number of zcol values.\n\n\n\n#This line of code allows us to sync the maps together\n\nsync(map_income, map_age)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#This is a side by side comparison from the leaflet.extras 2 package\n\nmap_income | map_age\n\n\n\n\n\n\n\nmapview(ga_counties_withgeo, zcol = \"medincome\", \n         col.regions = RColorBrewer::brewer.pal(9, \"Greens\"), \n         alpha.regions = 1,\n         legend = FALSE, \n         label = FALSE, \n         popup = FALSE)\n\nWarning: Found less unique colors (9) than unique zcol values (159)! \nInterpolating color vector to match number of zcol values.\n\n\n\n\n\n\n\n#Here I am customizing my labels. \n\nmylabel <- glue::glue(\"{ga_counties_withgeo$NAM} {ga_counties_withgeo$medincome}\")\n\n\nmapview(ga_counties_withgeo, zcol = \"medincome\", \n         col.regions = RColorBrewer::brewer.pal(9, \"Greens\"), \n         alpha.regions = 1,\n         label = mylabel)\n\nWarning: Found less unique colors (9) than unique zcol values (159)! \nInterpolating color vector to match number of zcol values.\n\n\n\n\n\n\n\n\nmypopup <- glue::glue(\"<strong>{ga_counties_withgeo$NAM}</strong><br />\n                      Total Population: {ga_counties_withgeo$totalpop}<br />\n                      Median Income: {ga_counties_withgeo$medincome}\") %>% \n  lapply(htmltools::HTML)\n\n# mylabel <- glue::glue(\"{all_data$State} {all_data$PctChange10_20}%\") %>%\n#   lapply(htmltools::HTML)"
  },
  {
    "objectID": "Article.html",
    "href": "Article.html",
    "title": "Article",
    "section": "",
    "text": "Are University Retention Rates in Washington D.C. Dropping?\nThe freshman retention rate of the George Washington University's Class of 2022 fell close to one percentage point from the previous year, down to 92%.\n\n\nMany of the colleges in the Washington Metropolitan Area share the quality of having costly tuition prices. Room and board can also be costly for students. Tuition for American University, Georgetown University and GW can all eclipse $50,000 per year. The three institutions are situated in the district where neighbourhoods with sky-high real estate prices are commonplace. The extreme tuition prices that students have to pay for these schools could be a deterrent for students wanting to stay at these institutions.\n\n\nThroughout the past 10 years the retention rate for The George Washington University (GW) has fluctuated between 90% and 93%. The current tuition at the university is $56,845. Add room and board and the cost can be upwards of $75,000. The number can differ depending on a student's room choice. To incentivize students into staying, the university has added more amenities in recent years including more dining dollars, $30 in free printing and 34 loads of laundry. The past years have also seen changes to GW's curriculum that have drastically changed class offerings.\n\n\nAccording to the National Center for Education Statistics, from 2016 to 2017, the national retention rate for students beginning in the fall semester seeking four year degrees was 81%. This number could be different for the Classes of 2021 and 2022. Sitting at roughly 87%, American University retention rate exceeds the national average freshman retention rate by 6%. Similar to GW, the retention rate at American fell by 1% from the 2017 class as the university's retention rate. Of the universities in the District that share similar tuition prices, American's retention rate is the lowest, though along with GW, it exceeds the national average.\n\n\nThough its tuition rate is high, Georgetown University has a retention rate of 96% for its 2018 freshman class. Georgetown's rate is the highest among the colleges in the metro area. At 94%, Howard University's retention rate is the second highest among the private research universities in the area. But compared to the other private universities, Howard's tuition sits at $26,756. Each one has different factors that contribute to their retention rates.\n\n\nThe University of Maryland College Park (UMD) retained about 95% of its 2018 freshmen, the same rate as the previous class. In state tuition for the university costs $8,824 meanwhile out of state tuition is $36,891. Compared with the universities within Washington, UMD's tuition prices are significantly lower. However, compared to other schools in the DC metro area, UMD is a state institution with a significantly larger student population that is primarily composed of in-state students.\n\n\nIn order to retain more of their freshman class, these institutions can look into methods that will encourage students to stay at their respective university."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "More Stuff About Me",
    "section": "",
    "text": "My name is Graham Hurley and I am a journalist. I was born in Atlanta, GA where I lived most of my life until college. I attended college at GWU and studied Journalism as well as Spanish."
  },
  {
    "objectID": "JoinTutorial.html",
    "href": "JoinTutorial.html",
    "title": "JoinTutorial",
    "section": "",
    "text": "#It is often necessary to combine datasets with similar or common variables. This is especially common in political datasets and voting data. The join function in Rstudio allows us to streamline this process. Here, we will show you how to use the join function and show you some examples using a public dataset. \n\n\n#Before hopping into our dates we need to load our necessary packages. The RStudio package that allows us to manipulate data and join datasets together is the “dplyr” package. Input this command into RStudio to install the package: \n\ninstall.packages(\"dplyr\")\n\nInstalling package into '/cloud/lib/x86_64-pc-linux-gnu-library/4.2'\n(as 'lib' is unspecified)\n\n\n\n# To load the dplyr package input this command below: \n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\n\n# We will be using the “mtcars” dataset that is available in RStudio. It is a dataset that compiles information about various car models. \n\n#The join function in the “dplyr” package is shown as ‘join()’ and its basic syntax is as follows: \n\n# join(x, y, by = \"common_variable\", type = \"join_type\")\n\n# In this command: \n#   - x and y are the datasets that would be joined \n#   - by specifies the common variable to join together \n#   - type specifies the type of join that would be used. There are four kinds of join commands: inner, left, right and full. It is an optional addition to the syntax and defaults to inner join if not specified. \n\n#One of the join types has to be specified in order for the command to be run, the funciton join() on its own will not work. \n\n# Now here are some examples of the join function using the mtcars dataset: \n\n\n# First, load the mtcars dataset\ndata(mtcars)\n\n# Create a subset of the mtcars dataset. \ndf1 <- mtcars[, c(\"mpg\", \"cyl\")]\n\n# Create a second subset of mtcars dataset\ndf2 <- mtcars[, c(\"mpg\", \"hp\")]\n\n# Since we are only usin the mtcars dataset in this example, we have to create subsets of the mtcars dataset in order to show how the join function works. \n\n# Next, use the inner_join command to join the data subsets together. Next, we create two subsets of the dataset: df1 containing the columns \"mpg\" and \"cyl\", and df2 containing the columns \"mpg\" and \"hp\". The mpg column refers to mile per gallon and fuel efficieny for each car model. The \"cyl\" variable refers to the number of cylinders in each car model. The inner_join function below will return only the matching records from both data subsets. The resulting output will show the \"cyl\" and \"mpg\" columns side by side. \n\ninner_join(df1, df2, by = \"mpg\")\n\nWarning in inner_join(df1, df2, by = \"mpg\"): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 1 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n    mpg cyl  hp\n1  21.0   6 110\n2  21.0   6 110\n3  21.0   6 110\n4  21.0   6 110\n5  22.8   4  93\n6  22.8   4  95\n7  21.4   6 110\n8  21.4   6 109\n9  18.7   8 175\n10 18.1   6 105\n11 14.3   8 245\n12 24.4   4  62\n13 22.8   4  93\n14 22.8   4  95\n15 19.2   6 123\n16 19.2   6 175\n17 17.8   6 123\n18 16.4   8 180\n19 17.3   8 180\n20 15.2   8 180\n21 15.2   8 150\n22 10.4   8 205\n23 10.4   8 215\n24 10.4   8 205\n25 10.4   8 215\n26 14.7   8 230\n27 32.4   4  66\n28 30.4   4  52\n29 30.4   4 113\n30 33.9   4  65\n31 21.5   4  97\n32 15.5   8 150\n33 15.2   8 180\n34 15.2   8 150\n35 13.3   8 245\n36 19.2   8 123\n37 19.2   8 175\n38 27.3   4  66\n39 26.0   4  91\n40 30.4   4  52\n41 30.4   4 113\n42 15.8   8 264\n43 19.7   6 175\n44 15.0   8 335\n45 21.4   4 110\n46 21.4   4 109\n\n\n\n# Here is another example using the left_join command. By using the left_join() function and specifying the two datasets and the common variable (mpg), we obtain an output that includes all rows from df1 and the columns \"cyl\" and \"hp\" from df2 alongside. If there are no matches in df2 for a particular value of \"mpg\" in df1, NAs will appear in the \"hp\" column:  \n\nleft_join(df1, df2, by = \"mpg\")\n\nWarning in left_join(df1, df2, by = \"mpg\"): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 1 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n    mpg cyl  hp\n1  21.0   6 110\n2  21.0   6 110\n3  21.0   6 110\n4  21.0   6 110\n5  22.8   4  93\n6  22.8   4  95\n7  21.4   6 110\n8  21.4   6 109\n9  18.7   8 175\n10 18.1   6 105\n11 14.3   8 245\n12 24.4   4  62\n13 22.8   4  93\n14 22.8   4  95\n15 19.2   6 123\n16 19.2   6 175\n17 17.8   6 123\n18 16.4   8 180\n19 17.3   8 180\n20 15.2   8 180\n21 15.2   8 150\n22 10.4   8 205\n23 10.4   8 215\n24 10.4   8 205\n25 10.4   8 215\n26 14.7   8 230\n27 32.4   4  66\n28 30.4   4  52\n29 30.4   4 113\n30 33.9   4  65\n31 21.5   4  97\n32 15.5   8 150\n33 15.2   8 180\n34 15.2   8 150\n35 13.3   8 245\n36 19.2   8 123\n37 19.2   8 175\n38 27.3   4  66\n39 26.0   4  91\n40 30.4   4  52\n41 30.4   4 113\n42 15.8   8 264\n43 19.7   6 175\n44 15.0   8 335\n45 21.4   4 110\n46 21.4   4 109\n\n\n\n# Here is an example using the right_join command. By using the right_join() function and specifying the two datasets and the common variable (mpg), we obtain an output that includes all rows from df2 and the columns \"cyl\" and \"hp\" from df1 alongside. If there are no matches in df1 for a particular value of \"mpg\" in df2, NAs will appear in the \"cyl\" column: \n\nright_join(df1, df2, by = \"mpg\")\n\nWarning in right_join(df1, df2, by = \"mpg\"): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 1 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n    mpg cyl  hp\n1  21.0   6 110\n2  21.0   6 110\n3  21.0   6 110\n4  21.0   6 110\n5  22.8   4  93\n6  22.8   4  95\n7  21.4   6 110\n8  21.4   6 109\n9  18.7   8 175\n10 18.1   6 105\n11 14.3   8 245\n12 24.4   4  62\n13 22.8   4  93\n14 22.8   4  95\n15 19.2   6 123\n16 19.2   6 175\n17 17.8   6 123\n18 16.4   8 180\n19 17.3   8 180\n20 15.2   8 180\n21 15.2   8 150\n22 10.4   8 205\n23 10.4   8 215\n24 10.4   8 205\n25 10.4   8 215\n26 14.7   8 230\n27 32.4   4  66\n28 30.4   4  52\n29 30.4   4 113\n30 33.9   4  65\n31 21.5   4  97\n32 15.5   8 150\n33 15.2   8 180\n34 15.2   8 150\n35 13.3   8 245\n36 19.2   8 123\n37 19.2   8 175\n38 27.3   4  66\n39 26.0   4  91\n40 30.4   4  52\n41 30.4   4 113\n42 15.8   8 264\n43 19.7   6 175\n44 15.0   8 335\n45 21.4   4 110\n46 21.4   4 109\n\n\n\n#Finally use the full_join command. Using the full_join() function and specifying the two datasets and the common variable (mpg), we obtain an output that includes all rows from both df1 and df2, with the columns \"cyl\" and \"hp\" side by side. In cases where there are no matches for a particular value of \"mpg\" in either dataset, NAs will appear in the respective column:\n\nfull_join(df1, df2, by = \"mpg\")\n\nWarning in full_join(df1, df2, by = \"mpg\"): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 1 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n    mpg cyl  hp\n1  21.0   6 110\n2  21.0   6 110\n3  21.0   6 110\n4  21.0   6 110\n5  22.8   4  93\n6  22.8   4  95\n7  21.4   6 110\n8  21.4   6 109\n9  18.7   8 175\n10 18.1   6 105\n11 14.3   8 245\n12 24.4   4  62\n13 22.8   4  93\n14 22.8   4  95\n15 19.2   6 123\n16 19.2   6 175\n17 17.8   6 123\n18 16.4   8 180\n19 17.3   8 180\n20 15.2   8 180\n21 15.2   8 150\n22 10.4   8 205\n23 10.4   8 215\n24 10.4   8 205\n25 10.4   8 215\n26 14.7   8 230\n27 32.4   4  66\n28 30.4   4  52\n29 30.4   4 113\n30 33.9   4  65\n31 21.5   4  97\n32 15.5   8 150\n33 15.2   8 180\n34 15.2   8 150\n35 13.3   8 245\n36 19.2   8 123\n37 19.2   8 175\n38 27.3   4  66\n39 26.0   4  91\n40 30.4   4  52\n41 30.4   4 113\n42 15.8   8 264\n43 19.7   6 175\n44 15.0   8 335\n45 21.4   4 110\n46 21.4   4 109\n\n\n\n#In conclusion, the join command is an incredibly useful tool to combine datsets with common variables together. By understanding the syntax of the four join commands you can perform complex data analysis."
  },
  {
    "objectID": "virginia_election_project_youranalysis.html",
    "href": "virginia_election_project_youranalysis.html",
    "title": "Virginia Election Project",
    "section": "",
    "text": "library(jsonlite)\n\n\nAttaching package: 'jsonlite'\n\n\nThe following object is masked from 'package:purrr':\n\n    flatten\n\n\n\nComparing Virgnia Gov vs. Prez\n\nprez_2020 <- read_csv(\"processed_data/va_2020_prez_cleaned.csv\")\n\nRows: 134 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): locality\nnum (3): biden, trump, total_votes_2021_prez\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(joined_vacomparison)\n\n# A tibble: 6 × 9\n  locality       biden trump biden_pct trump_pct youngkin mcauliffe pct_youngkin\n  <chr>          <dbl> <dbl>     <dbl>     <dbl>    <int>     <int>        <dbl>\n1 ACCOMACK COUN…  7578  9172      44.7      54.1     7878      4948         61.1\n2 ALBEMARLE COU… 42466 20804      65.7      32.2    19141     31919         37.2\n3 ALEXANDRIA CI… 66240 14544      80.3      17.6    14013     43866         24.0\n4 ALLEGHANY COU…  2243  5859      27.3      71.4     4530      1518         74.5\n5 AMELIA COUNTY   2411  5390      30.6      68.3     4720      1617         74.2\n6 AMHERST COUNTY  5672 11041      33.4      64.9     9731      3897         71  \n# ℹ 1 more variable: pct_mcauliffe <dbl>\n\n\n\nprez_2020 %>% \n  mutate(\n    biden_pct = janitor::round_half_up(biden / total_votes_2021_prez * 100, 2),\n    trump_pct = janitor::round_half_up(trump / total_votes_2021_prez * 100, 2)\n  )\n\n# A tibble: 134 × 6\n   locality           biden trump total_votes_2021_prez biden_pct trump_pct\n   <chr>              <dbl> <dbl>                 <dbl>     <dbl>     <dbl>\n 1 Accomack County     7578  9172                 16962      44.7      54.1\n 2 Albemarle County   42466 20804                 64657      65.7      32.2\n 3 Alexandria City    66240 14544                 82508      80.3      17.6\n 4 Alleghany County    2243  5859                  8203      27.3      71.4\n 5 Amelia County       2411  5390                  7893      30.6      68.3\n 6 Amherst County      5672 11041                 17005      33.4      64.9\n 7 Appomattox County   2418  6702                  9268      26.1      72.3\n 8 Arlington County  105344 22318                130699      80.6      17.1\n 9 Augusta County     10840 30714                 42278      25.6      72.6\n10 Bath County          646  1834                  2501      25.8      73.3\n# ℹ 124 more rows\n\n\n\njsonfile <- \"raw_data/va_gov_json_archived.json\"\n\n#using jsonlite package function fromJSON()\nthis.content <- fromJSON(jsonfile)\n\n#dataframe from just the 6 content \ncontent_df <- as.data.frame(this.content[[6]])\n\n\nresults <- content_df %>%\n  unnest(cols = Candidates)\n\nhead(results)\n\n# A tibble: 6 × 9\n  Locality$LocalityName PrecinctsReporting PrecinctsParticipating LastModified  \n  <chr>                              <int>                  <int> <chr>         \n1 ACCOMACK COUNTY                       19                     19 2021-11-08T09…\n2 ACCOMACK COUNTY                       19                     19 2021-11-08T09…\n3 ACCOMACK COUNTY                       19                     19 2021-11-08T09…\n4 ACCOMACK COUNTY                       19                     19 2021-11-08T09…\n5 ALBEMARLE COUNTY                      33                     33 2021-11-08T10…\n6 ALBEMARLE COUNTY                      33                     33 2021-11-08T10…\n# ℹ 6 more variables: Locality$LocalityCode <chr>, BallotName <chr>,\n#   BallotOrder <int>, Votes <int>, Percentage <chr>, PoliticalParty <chr>\n\n\n\nresults <- results %>%\n  unnest(cols = Locality)\n\nhead(results)\n\n# A tibble: 6 × 10\n  LocalityName     LocalityCode PrecinctsReporting PrecinctsParticipating\n  <chr>            <chr>                     <int>                  <int>\n1 ACCOMACK COUNTY  001                          19                     19\n2 ACCOMACK COUNTY  001                          19                     19\n3 ACCOMACK COUNTY  001                          19                     19\n4 ACCOMACK COUNTY  001                          19                     19\n5 ALBEMARLE COUNTY 003                          33                     33\n6 ALBEMARLE COUNTY 003                          33                     33\n# ℹ 6 more variables: LastModified <chr>, BallotName <chr>, BallotOrder <int>,\n#   Votes <int>, Percentage <chr>, PoliticalParty <chr>\n\n\n\ngov_2021 <- results %>% \n  clean_names() %>% \n  select(-precincts_reporting,\n         -precincts_participating,\n         -last_modified,\n         -ballot_order)\n\nhead(gov_2021)\n\n# A tibble: 6 × 6\n  locality_name    locality_code ballot_name    votes percentage political_party\n  <chr>            <chr>         <chr>          <int> <chr>      <chr>          \n1 ACCOMACK COUNTY  001           Glenn A. Youn…  7878 61.08%     Republican     \n2 ACCOMACK COUNTY  001           Terry R. McAu…  4948 38.37%     Democratic     \n3 ACCOMACK COUNTY  001           Princess L. B…    67 0.52%      Liberation     \n4 ACCOMACK COUNTY  001           Write In           4 0.03%      Write-In       \n5 ALBEMARLE COUNTY 003           Glenn A. Youn… 19141 37.21%     Republican     \n6 ALBEMARLE COUNTY 003           Terry R. McAu… 31919 62.05%     Democratic     \n\n\n\ngov_2021_wide <- gov_2021 %>% \n  pivot_wider(names_from = ballot_name, values_from = c(votes, percentage))\n\ngov_2021_wide <- gov_2021_wide %>% \n  clean_names()\n\ngov_2021_wide <- gov_2021_wide %>% \n  rename(\n    youngkin = votes_glenn_a_youngkin,\n    mcauliffe = votes_terry_r_mc_auliffe,\n    pct_youngkin = percentage_glenn_a_youngkin,\n    pct_mcauliffe = percentage_terry_r_mc_auliffe\n  )\n\nhead(gov_2021_wide)\n\n# A tibble: 6 × 11\n  locality_name    locality_code political_party youngkin mcauliffe\n  <chr>            <chr>         <chr>              <int>     <int>\n1 ACCOMACK COUNTY  001           Republican          7878        NA\n2 ACCOMACK COUNTY  001           Democratic            NA      4948\n3 ACCOMACK COUNTY  001           Liberation            NA        NA\n4 ACCOMACK COUNTY  001           Write-In              NA        NA\n5 ALBEMARLE COUNTY 003           Republican         19141        NA\n6 ALBEMARLE COUNTY 003           Democratic            NA     31919\n# ℹ 6 more variables: votes_princess_l_blanding <int>, votes_write_in <int>,\n#   pct_youngkin <chr>, pct_mcauliffe <chr>,\n#   percentage_princess_l_blanding <chr>, percentage_write_in <chr>"
  },
  {
    "objectID": "BreakingNewsStory.html",
    "href": "BreakingNewsStory.html",
    "title": "BreakingNewsStory",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(janitor)\n\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\nlibrary(httr)\nlibrary(jsonlite)\n\n\nAttaching package: 'jsonlite'\n\nThe following object is masked from 'package:purrr':\n\n    flatten\n\nlibrary(kableExtra)\n\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\nlibrary(here)\n\nhere() starts at /cloud/project\n\n\n\nprez_2020 <- read_csv(\"processed_data/va_2020_prez_cleaned.csv\")\n\nRows: 134 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): locality\nnum (3): biden, trump, total_votes_2021_prez\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n# Calculate total votes for Biden and Trump\n\nprez_2020\n\n# A tibble: 134 × 4\n   locality           biden trump total_votes_2021_prez\n   <chr>              <dbl> <dbl>                 <dbl>\n 1 Accomack County     7578  9172                 16962\n 2 Albemarle County   42466 20804                 64657\n 3 Alexandria City    66240 14544                 82508\n 4 Alleghany County    2243  5859                  8203\n 5 Amelia County       2411  5390                  7893\n 6 Amherst County      5672 11041                 17005\n 7 Appomattox County   2418  6702                  9268\n 8 Arlington County  105344 22318                130699\n 9 Augusta County     10840 30714                 42278\n10 Bath County          646  1834                  2501\n# ℹ 124 more rows\n\n  biden_votes <- sum(prez_2020$biden) \n  trump_votes <- sum(prez_2020$trump) \n\n\n# Calculate the difference in votes between Biden and Trump\nprez_2020\n\n# A tibble: 134 × 4\n   locality           biden trump total_votes_2021_prez\n   <chr>              <dbl> <dbl>                 <dbl>\n 1 Accomack County     7578  9172                 16962\n 2 Albemarle County   42466 20804                 64657\n 3 Alexandria City    66240 14544                 82508\n 4 Alleghany County    2243  5859                  8203\n 5 Amelia County       2411  5390                  7893\n 6 Amherst County      5672 11041                 17005\n 7 Appomattox County   2418  6702                  9268\n 8 Arlington County  105344 22318                130699\n 9 Augusta County     10840 30714                 42278\n10 Bath County          646  1834                  2501\n# ℹ 124 more rows\n\n  vote_difference <- biden_votes - trump_votes\n\n\n# Calculate the number of counties won by Biden and Trump\nprez_2020  \n\n# A tibble: 134 × 4\n   locality           biden trump total_votes_2021_prez\n   <chr>              <dbl> <dbl>                 <dbl>\n 1 Accomack County     7578  9172                 16962\n 2 Albemarle County   42466 20804                 64657\n 3 Alexandria City    66240 14544                 82508\n 4 Alleghany County    2243  5859                  8203\n 5 Amelia County       2411  5390                  7893\n 6 Amherst County      5672 11041                 17005\n 7 Appomattox County   2418  6702                  9268\n 8 Arlington County  105344 22318                130699\n 9 Augusta County     10840 30714                 42278\n10 Bath County          646  1834                  2501\n# ℹ 124 more rows\n\n  counties_biden_won <- sum(prez_2020$biden > prez_2020$trump) \n  counties_trump_won <- sum(prez_2020$trump > prez_2020$biden)\n\n\n# BREAKING NEWS: Virginia Flips Blue\n#In a historic election, the state of Virginia has declared its results in the 2020 Presidential Election. With data sourced from the Virginia Department of Elections, the final numbers reveal an intriguing outcome that has captured the nation's attention.\n\n#After a fierce battle for Virginia's 13 electoral votes, Democratic nominee Joe Biden has emerged as the winner. The analysis of the data shows that Biden secured a total of sum(prez_2020$biden) votes which is 2,413,568 votes. Republican incumbent candidate Donald Trump received sum(prez_2020$trump) votes which is 1,962,430 votes in total. These results indicate a victory for Biden with sum(prez_2020$biden) - sum(prez_2020$trump) more votes than his opponent. These results indicate a victory for Biden with 451,138 more votes than his opponent.\n\n#The election data further highlights the geographical distribution of votes across the state. Biden's support was concentrated in urban areas, such as Alexandria and Richmond, where he secured a significant lead. On the other hand, Trump had a stronghold in rural regions, including counties like Franklin and Highland.\n\n#According to the county-level results, Biden won in sum(prez_2020$biden > prez_2020$trump) counties, while Trump emerged victorious in sum(prez_2020$trump > prez_2020$biden) counties. These numbers showcase the diversity and political landscape of Virginia, with pockets of support for both candidates throughout the state.\n\n#The voter turnout in Virginia was impressive, with 4,036,654 individuals exercising their right to vote. This represents a 74.54% turnout of the eligible population in the state. The high voter participation in this election can be attributed to the significant efforts made by election officials to ensure accessible voting options, including early voting and mail-in ballots. Virginia has revolutionized its voting systems in recent years making it easier for everyday citizens to vote. \n\n# Virginia's election results play a vital role in shaping the national political landscape. Historically, the state has been a battleground, but recent elections have shown a Democratic shift. Biden's win in Virginia inches him closer to the threshold of 270 electoral votes required to win the presidency.\n\n# Virginia's election outcome serves as a significant milestone in the 2020 Presidential Election. Virginia is consistently a key battleground state and it was exptected that Trump would win this state prior to the election."
  }
]